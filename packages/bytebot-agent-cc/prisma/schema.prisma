generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bytebot_files {
  bytebot_file_id    String        @id
  bytebot_name       String
  bytebot_type       String
  bytebot_size       Int
  bytebot_data       String
  bytebot_created_at DateTime      @default(now())
  bytebot_updated_at DateTime
  bytebot_task_id    String
  bytebot_tasks      bytebot_tasks @relation(fields: [bytebot_task_id], references: [bytebot_task_id], onDelete: Cascade)

  @@index([bytebot_task_id], map: "bytebot_files_bytebot_task_id_fkey")
}

model bytebot_messages {
  bytebot_message_id String                        @id
  bytebot_content    Json
  bytebot_role       bytebot_messages_bytebot_role @default(ASSISTANT)
  bytebot_created_at DateTime                      @default(now())
  bytebot_updated_at DateTime
  bytebot_task_id    String
  bytebot_summary_id String?
  bytebot_summaries  bytebot_summaries?            @relation(fields: [bytebot_summary_id], references: [bytebot_summary_id])
  bytebot_tasks      bytebot_tasks                 @relation(fields: [bytebot_task_id], references: [bytebot_task_id], onDelete: Cascade)

  @@index([bytebot_summary_id], map: "bytebot_messages_bytebot_summary_id_fkey")
  @@index([bytebot_task_id, bytebot_created_at])
}

model bytebot_summaries {
  bytebot_summary_id      String              @id
  bytebot_content         String
  bytebot_created_at      DateTime            @default(now())
  bytebot_updated_at      DateTime
  bytebot_task_id         String
  bytebot_parent_id       String?
  bytebot_messages        bytebot_messages[]
  bytebot_summaries       bytebot_summaries?  @relation("bytebot_summariesTobytebot_summaries", fields: [bytebot_parent_id], references: [bytebot_summary_id])
  other_bytebot_summaries bytebot_summaries[] @relation("bytebot_summariesTobytebot_summaries")
  bytebot_tasks           bytebot_tasks       @relation(fields: [bytebot_task_id], references: [bytebot_task_id], onDelete: Cascade)

  @@index([bytebot_parent_id], map: "bytebot_summaries_bytebot_parent_id_fkey")
  @@index([bytebot_task_id], map: "bytebot_summaries_bytebot_task_id_fkey")
}

model bytebot_tasks {
  bytebot_task_id       String                           @id
  bytebot_description   String
  bytebot_type          bytebot_tasks_bytebot_type       @default(IMMEDIATE)
  bytebot_status        bytebot_tasks_bytebot_status     @default(PENDING)
  bytebot_priority      bytebot_tasks_bytebot_priority   @default(MEDIUM)
  bytebot_control       bytebot_tasks_bytebot_control    @default(ASSISTANT)
  bytebot_created_at    DateTime                         @default(now())
  bytebot_created_by    bytebot_tasks_bytebot_created_by @default(USER)
  bytebot_scheduled_for DateTime?
  bytebot_updated_at    DateTime
  bytebot_executed_at   DateTime?
  bytebot_completed_at  DateTime?
  bytebot_queued_at     DateTime?
  bytebot_error         String?
  bytebot_result        Json?
  bytebot_model         Json
  bytebot_files         bytebot_files[]
  bytebot_messages      bytebot_messages[]
  bytebot_summaries     bytebot_summaries[]
}

enum bytebot_tasks_bytebot_type {
  IMMEDIATE
  SCHEDULED
}

enum bytebot_messages_bytebot_role {
  USER
  ASSISTANT
}

enum bytebot_tasks_bytebot_status {
  PENDING
  RUNNING
  NEEDS_HELP
  NEEDS_REVIEW
  COMPLETED
  CANCELLED
  FAILED
}

enum bytebot_tasks_bytebot_priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum bytebot_tasks_bytebot_control {
  USER
  ASSISTANT
}

enum bytebot_tasks_bytebot_created_by {
  USER
  ASSISTANT
}
