generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Task {
  id           String       @id @default(uuid()) @map("bytebot_task_id")
  description  String       @map("bytebot_description")
  type         TaskType     @default(IMMEDIATE) @map("bytebot_type")
  status       TaskStatus   @default(PENDING) @map("bytebot_status")
  priority     TaskPriority @default(MEDIUM) @map("bytebot_priority")
  control      Role         @default(ASSISTANT) @map("bytebot_control")
  createdAt    DateTime     @default(now()) @map("bytebot_created_at")
  createdBy    Role         @default(USER) @map("bytebot_created_by")
  scheduledFor DateTime?    @map("bytebot_scheduled_for")
  updatedAt    DateTime     @updatedAt @map("bytebot_updated_at")
  executedAt   DateTime?    @map("bytebot_executed_at")
  completedAt  DateTime?    @map("bytebot_completed_at")
  queuedAt     DateTime?    @map("bytebot_queued_at")
  error        String?      @map("bytebot_error")
  result       Json?        @map("bytebot_result")
  model        Json         @map("bytebot_model")
  files        File[]
  messages     Message[]
  summaries    Summary[]

  @@map("bytebot_tasks")
}

model Summary {
  id             String    @id @default(uuid()) @map("bytebot_summary_id")
  content        String    @map("bytebot_content")
  createdAt      DateTime  @default(now()) @map("bytebot_created_at")
  updatedAt      DateTime  @updatedAt @map("bytebot_updated_at")
  taskId         String    @map("bytebot_task_id")
  parentId       String?   @map("bytebot_parent_id")
  messages       Message[]
  parentSummary  Summary?  @relation("SummaryHierarchy", fields: [parentId], references: [id])
  childSummaries Summary[] @relation("SummaryHierarchy")
  task           Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([parentId], map: "bytebot_summaries_bytebot_parent_id_fkey")
  @@index([taskId], map: "bytebot_summaries_bytebot_task_id_fkey")
  @@map("bytebot_summaries")
}

model Message {
  id        String   @id @default(uuid()) @map("bytebot_message_id")
  content   Json     @map("bytebot_content")
  role      Role     @default(ASSISTANT) @map("bytebot_role")
  createdAt DateTime @default(now()) @map("bytebot_created_at")
  updatedAt DateTime @updatedAt @map("bytebot_updated_at")
  taskId    String   @map("bytebot_task_id")
  summaryId String?  @map("bytebot_summary_id")
  summary   Summary? @relation(fields: [summaryId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, createdAt])
  @@index([summaryId], map: "bytebot_messages_bytebot_summary_id_fkey")
  @@map("bytebot_messages")
}

model File {
  id        String   @id @default(uuid()) @map("bytebot_file_id")
  name      String   @map("bytebot_name")
  type      String   @map("bytebot_type")
  size      Int      @map("bytebot_size")
  data      String   @map("bytebot_data")
  createdAt DateTime @default(now()) @map("bytebot_created_at")
  updatedAt DateTime @updatedAt @map("bytebot_updated_at")
  taskId    String   @map("bytebot_task_id")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId], map: "bytebot_files_bytebot_task_id_fkey")
  @@map("bytebot_files")
}

enum TaskStatus {
  PENDING
  RUNNING
  NEEDS_HELP
  NEEDS_REVIEW
  COMPLETED
  CANCELLED
  FAILED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Role {
  USER
  ASSISTANT
}

enum TaskType {
  IMMEDIATE
  SCHEDULED
}
