apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgresql.fullname" . }}
  labels:
    {{- include "postgresql.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "postgresql.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "postgresql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "postgresql.selectorLabels" . | nindent 8 }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: postgresql
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        env:
        - name: POSTGRES_USER
          value: {{ .Values.auth.username | quote }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "postgresql.fullname" . }}-secret
              key: postgres-password
        - name: POSTGRES_DB
          value: {{ .Values.auth.database | quote }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U {{ .Values.auth.username | quote }} -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - exec pg_isready -U {{ .Values.auth.username | quote }} -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
      {{- if .Values.metrics.enabled }}
      - name: metrics
        image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
        imagePullPolicy: {{ .Values.metrics.image.pullPolicy }}
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://{{ .Values.auth.username }}:{{ .Values.auth.password }}@localhost:5432/{{ .Values.auth.database }}?sslmode=disable"
        ports:
        - name: metrics
          containerPort: {{ .Values.metrics.service.port }}
          protocol: TCP
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        {{- include "postgresql.labels" . | nindent 8 }}
    spec:
      accessModes:
        - {{ .Values.persistence.accessMode }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: {{ .Values.persistence.storageClass }}
      {{- end }}
      {{- end }}